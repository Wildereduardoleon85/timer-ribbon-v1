{"version":3,"sources":["TimerApp.js","index.js"],"names":["TimerApp","useState","remainingTime","setRemainingTime","getTime","fetch","res","json","data","expirationTimeFromLocalStorage","JSON","parse","localStorage","getItem","getTimeStamp","then","unixtime","expirationTime","setItem","stringify","useEffect","interval","setInterval","removeItem","clearInterval","onVisibilityChange","document","visibilityState","useLayoutEffect","addEventListener","removeEventListener","time","Date","formattedMinutes","String","getMinutes","padStart","formattedSeconds","getSeconds","className","ReactDOM","render","StrictMode","getElementById"],"mappings":"yOA+FeA,MA5Ff,WAIE,IACA,EAA0CC,mBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEMC,EAAO,iDAAG,gHACIC,MAChB,yDAFY,cACRC,EADQ,gBAIKA,EAAIC,OAJT,cAIRC,EAJQ,yBAKPA,GALO,2CAAH,qDAQPC,EAAiCC,KAAKC,MAC1CC,aAAaC,QAAQ,qBAGjBC,EAAe,WACnBV,IAAUW,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SAIVC,EAA4B,IAAXD,EApBE,KAwBpBP,EAIHN,EAAiBM,EAA4C,IAAXO,IAHlDJ,aAAaM,QAAQ,mBAAoBR,KAAKS,UAAUF,IACxDd,EAAiBc,EAA4B,IAAXD,QAOxCI,qBAAU,WAKRN,MAEC,IAEHM,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BnB,EAAiBD,EAAgB,OAChC,KAWH,OANIA,EAAgB,IAClBU,aAAaW,WAAW,oBACxBpB,EAAiB,GACjBqB,cAAcH,IAGT,kBAAMG,cAAcH,MAC1B,CAACnB,IAEJ,IAAMuB,EAAqB,WACQ,YAA7BC,SAASC,iBACXb,KAIJc,2BAAgB,WAGd,OAFAF,SAASG,iBAAiB,mBAAoBJ,GAEvC,kBACLC,SAASI,oBAAoB,mBAAoBL,MAClD,IAMH,IAAMM,EAAO,IAAIC,KAAK9B,GAEhB+B,EAAmBC,OAAOH,EAAKI,cAAcC,SAAS,EAAG,KACzDC,EAAmBH,OAAOH,EAAKO,cAAcF,SAAS,EAAG,KAE/D,OACE,qBAAKG,UAAU,YAAf,SACE,iDAAkBN,EAAlB,YAAsCI,EAAtC,mDCtFNG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASiB,eAAe,W","file":"static/js/main.7037acb1.chunk.js","sourcesContent":["import React, { useEffect, useLayoutEffect, useState } from 'react'\nimport './TimerApp.css'\n\nfunction TimerApp() {\n  /**\n   * Duration in milliseconds of the custom catalog session\n   */\n  const USER_ID_TIME_SESSION = 36000000\n  const [remainingTime, setRemainingTime] = useState(0)\n\n  const getTime = async () => {\n    const res = await fetch(\n      'http://worldtimeapi.org/api/timezone/America/Santiago'\n    )\n    const data = await res.json()\n    return data\n  }\n\n  const expirationTimeFromLocalStorage = JSON.parse(\n    localStorage.getItem('sessionTimeStamp')\n  )\n\n  const getTimeStamp = () => {\n    getTime().then(({ unixtime }) => {\n      /**\n       * Convert current timestamp to milliseconds & add the user id expiration time\n       */\n      const expirationTime = unixtime * 1000 + USER_ID_TIME_SESSION\n      /**\n       * Check local storage, and add timestamp if needed\n       */\n      if (!expirationTimeFromLocalStorage) {\n        localStorage.setItem('sessionTimeStamp', JSON.stringify(expirationTime))\n        setRemainingTime(expirationTime - unixtime * 1000)\n      } else {\n        setRemainingTime(expirationTimeFromLocalStorage - unixtime * 1000)\n      }\n    })\n  }\n\n  useEffect(() => {\n    /**\n     * Check for time trough the api every time the component is mounted to prevent\n     * inconsistences with local os time\n     */\n    getTimeStamp()\n    // eslint-disable-next-line\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRemainingTime(remainingTime - 1000)\n    }, 1000)\n\n    /**\n     * reset values once the timer has expired\n     */\n    if (remainingTime < 0) {\n      localStorage.removeItem('sessionTimeStamp')\n      setRemainingTime(0)\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval)\n  }, [remainingTime])\n\n  const onVisibilityChange = () => {\n    if (document.visibilityState === 'visible') {\n      getTimeStamp()\n    }\n  }\n\n  useLayoutEffect(() => {\n    document.addEventListener('visibilitychange', onVisibilityChange)\n\n    return () =>\n      document.removeEventListener('visibilitychange', onVisibilityChange)\n  }, [])\n\n  /**\n   * Transform milliseconds remaining time into date format to be able to extract the desired\n   * values, in this case; minutes and seconds\n   */\n  const time = new Date(remainingTime)\n\n  const formattedMinutes = String(time.getMinutes()).padStart(2, '0')\n  const formattedSeconds = String(time.getSeconds()).padStart(2, '0')\n\n  return (\n    <div className='container'>\n      <h1>{`Tienes 00:${formattedMinutes}:${formattedSeconds} para revisar tu cat√°logo personalizado`}</h1>\n    </div>\n  )\n}\n\nexport default TimerApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport TimerApp from './TimerApp'\n\nReactDOM.render(\n  <React.StrictMode>\n    <TimerApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}